"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramBotService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const TelegramBot = require("node-telegram-bot-api");
const user_service_1 = require("../user/user.service");
const copyright_config_1 = require("../config/copyright.config");
let TelegramBotService = class TelegramBotService {
    constructor(configService, userService) {
        this.configService = configService;
        this.userService = userService;
        const token = this.configService.get('BOT_TOKEN');
        this.bot = new TelegramBot(token, { polling: true });
        console.log('Bot instance created');
        const webAppString = this.configService.get('WEB_APP_URL');
        this.WEB_APP_URL = webAppString;
        const authLoginString = this.configService.get('SERVER_URL');
        this.SERVER_URL = authLoginString;
        const supportUrlString = this.configService.get('SUPPORT_URL');
        this.SUPPORT_URL = supportUrlString;
        const copyrightConfig = (0, copyright_config_1.getCopyrightConfig)(this.configService);
        this.COPYRIGHT_PDF_PATH = copyrightConfig.pdfPath;
    }
    onModuleInit() {
        console.log('Bot initialized');
        setTimeout(() => {
            this.setupBotCommands();
            this.handleStartCommand();
            this.handleAuthCommand();
            this.handleSupportCommand();
            this.handleCallbackQueries();
        }, 1000);
    }
    async getUserProfilePhotos(id) {
        return await this.bot.getUserProfilePhotos(id);
    }
    async setupBotCommands() {
        try {
            await this.bot.setMyCommands([
                {
                    command: 'start',
                    description: 'üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
                },
                {
                    command: 'auth',
                    description: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
                },
                {
                    command: 'support',
                    description: 'üõ† –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'
                }
            ]);
        }
        catch (error) {
            console.error('Error setting bot commands:', error);
        }
    }
    handleStartCommand() {
        this.bot.onText(/\/start(.*)/, async (msg, match) => {
            const chatId = msg.chat.id;
            const parameter = match[1]?.trim();
            if (parameter === 'auth') {
                await this.sendAuthMessage(chatId);
                return;
            }
            this.bot.sendMessage(chatId, 'üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GraphON!* üåü\n\n' +
                '–í–∞—à –ª–∏—á–Ω—ã–π –≥–∏–¥ –ø–æ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É –≤–Ω–µ—É—á–µ–±–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n\n', {
                parse_mode: "Markdown",
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                                web_app: {
                                    url: this.WEB_APP_URL,
                                    hide_webapp_header: true
                                },
                            },
                        ],
                        [
                            {
                                text: 'üì¢ Telegram –∫–∞–Ω–∞–ª',
                                url: 'https://t.me/graph_ON',
                            },
                        ],
                    ],
                },
            });
        });
    }
    handleAuthCommand() {
        this.bot.onText(/\/auth/, async (msg) => {
            const chatId = msg.chat.id;
            await this.sendAuthMessage(chatId);
        });
    }
    handleSupportCommand() {
        this.bot.onText(/\/support/, (msg) => {
            const chatId = msg.chat.id;
            this.sendSupportMessage(chatId);
        });
    }
    handleCallbackQueries() {
        this.bot.on('callback_query', async (callbackQuery) => {
            const chatId = callbackQuery.message.chat.id;
            const data = callbackQuery.data;
            if (data === 'show_copyright_agreement') {
                await this.sendCopyrightAgreement(chatId);
            }
            else if (data === 'accept_copyright_agreement') {
                await this.acceptCopyrightAgreement(chatId, callbackQuery.from.id);
            }
            else if (data === 'proceed_to_auth') {
                await this.sendAuthMessage(chatId);
            }
            await this.bot.answerCallbackQuery(callbackQuery.id);
        });
    }
    async sendAuthMessage(chatId) {
        try {
            const user = await this.userService.findByTelegramId(chatId);
            if (user && user.copyrightAgreementAccepted) {
                this.bot.sendMessage(chatId, 'üîê *–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ GraphON*\n\n' +
                    '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è\n\n' +
                    '---\n\n' +
                    'üìå *–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º—ã –ø–æ–ª—É—á–∏–º –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏?*\n\n' +
                    '- *Telegram ID*\n' +
                    '- *–ò–º—è*\n' +
                    '- *–§–∞–º–∏–ª–∏—é*\n' +
                    '- *–Æ–∑–µ—Ä–Ω–µ–π–º*\n' +
                    '- *–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è*', {
                    parse_mode: "Markdown",
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è',
                                    login_url: {
                                        url: `${this.SERVER_URL}/auth/telegram/callback`,
                                    },
                                },
                            ],
                        ],
                    },
                });
            }
            else {
                this.bot.sendMessage(chatId, 'üìã *–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤–∞—Ö*\n\n' +
                    '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤–∞—Ö.\n\n' +
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏ –ø—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è.', {
                    parse_mode: "Markdown",
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ',
                                    callback_data: 'show_copyright_agreement'
                                },
                            ],
                        ],
                    },
                });
            }
        }
        catch (error) {
            console.error('Error in sendAuthMessage:', error);
            this.bot.sendMessage(chatId, 'üìã *–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤–∞—Ö*\n\n' +
                '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤–∞—Ö.\n\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏ –ø—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è.', {
                parse_mode: "Markdown",
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ',
                                callback_data: 'show_copyright_agreement'
                            },
                        ],
                    ],
                },
            });
        }
    }
    async sendCopyrightAgreement(chatId) {
        try {
            await this.bot.sendDocument(chatId, this.COPYRIGHT_PDF_PATH, {
                caption: 'üìã *–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤–∞—Ö*\n\n' +
                    '–î–∞—é —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω(–∞) —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –ü–æ–ª–æ–∂–µ–Ω–∏–µ–º –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö, –ü–æ–ª–∏—Ç–∏–∫–æ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ cookies.\n\n',
                parse_mode: "Markdown",
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ',
                                callback_data: 'accept_copyright_agreement'
                            },
                        ],
                    ],
                },
            });
        }
        catch (error) {
            console.error('Error sending copyright agreement:', error);
            this.bot.sendMessage(chatId, 'üìã *–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤–∞—Ö*\n\n' +
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.\n\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.', {
                parse_mode: "Markdown",
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üí¨ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                                url: this.SUPPORT_URL,
                            },
                        ],
                    ],
                },
            });
        }
    }
    async acceptCopyrightAgreement(chatId, telegramId) {
        try {
            await this.userService.acceptCopyrightAgreement(telegramId);
            this.bot.sendMessage(chatId, '‚úÖ *–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!*\n\n' +
                '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.', {
                parse_mode: "Markdown",
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üîê –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é',
                                callback_data: 'proceed_to_auth'
                            },
                        ],
                    ],
                },
            });
        }
        catch (error) {
            console.error('Error accepting copyright agreement:', error);
            this.bot.sendMessage(chatId, '‚ùå *–û—à–∏–±–∫–∞*\n\n' +
                '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.\n\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.', {
                parse_mode: "Markdown",
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üí¨ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                                url: this.SUPPORT_URL,
                            },
                        ],
                    ],
                },
            });
        }
    }
    sendSupportMessage(chatId) {
        this.bot.sendMessage(chatId, 'üõ† *–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ GraphON*\n\n' +
            'üìû *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å?*\n\n' +
            '‚Ä¢ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n', {
            parse_mode: "Markdown",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üí¨ –ß–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
                            url: this.SUPPORT_URL,
                        },
                    ],
                ],
            },
        });
    }
    sendMessage(chatId, message) {
        this.bot.sendMessage(chatId, message);
    }
};
exports.TelegramBotService = TelegramBotService;
exports.TelegramBotService = TelegramBotService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [config_1.ConfigService,
        user_service_1.UserService])
], TelegramBotService);
//# sourceMappingURL=telegram.service.js.map